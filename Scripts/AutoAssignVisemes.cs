using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using UnityEditorInternal;
using VRCSDK2;

[CustomEditor(typeof(VisemeCreator))]
public class AutoAssignVisemes : Editor
{
    private string labelText =
        "This script assumes you are using visemes generated by CATs.\nThey should all start with 'vrc.v_'.";
    VisemeCreator obj;
    public void OnEnable()
    {
        obj = (VisemeCreator)target;

    }
    public override void OnInspectorGUI()
    {
        GUILayout.Label(labelText);
        if (!GUILayout.Button("Find and add visemes."))
            return;
        DoEverything();
    }

    Transform avatar = null;
    private SkinnedMeshRenderer avatarMesh = null;
    private VRC_AvatarDescriptor avatarDescriptor = null;
    string animationPath;
    string exportPath;

    private bool findAvatarAndAnimationPath(Transform cur)
    {
        // Find the avatar root
        string path = "";
        do
        {
            if (cur.GetComponent<VRCSDK2.VRC_AvatarDescriptor>() != null)
            {
                avatar = cur;
                avatarMesh = cur.GetComponentInChildren<SkinnedMeshRenderer>();
                if (avatarMesh == null)
                {
                    Debug.LogError("No skinned mesh renderer found");
                }
                //Debug.Log("Mesh found: Blendshape count - " + avatarMesh.sharedMesh.blendShapeCount);
                avatarDescriptor = cur.GetComponent<VRC_AvatarDescriptor>();
                break;
            }
            if (path.Length > 0)
                path = cur.name + "/" + path;
            else
                path = cur.name;
            cur = cur.parent;
        } while (cur != null);

        if (avatar != null)
        {
            animationPath = path;
            Debug.Log("Animation path:" + animationPath);
            return true;
        }
        return false;
    }
    private void Cleanup()
    {

        // Remove this script from the avatar so that VRC is happy.
        DestroyImmediate(obj.gameObject.GetComponent<VisemeCreator>());
    }

    private void DoEverything()
    {
        try
        {
            if (!findAvatarAndAnimationPath(obj.transform))
            {
                Debug.LogError("Could not find Avatar Descriptor component.");
                return;
            }
            if (avatarDescriptor.lipSync != VRC_AvatarDescriptor.LipSyncStyle.VisemeBlendShape)
            {
                avatarDescriptor.lipSync = VRC_AvatarDescriptor.LipSyncStyle.VisemeBlendShape;
                avatarDescriptor.VisemeSkinnedMesh = avatarMesh;
                labelText = "Lipsync style was not set to Viseme Blend Shape.\nClick again to assign blendshapes.";
                return;
            }


            AssignBlendshapes();

            Debug.Log("Viseme Creator - All done!");
            Cleanup();
        }
        catch (System.Exception ex)
        {
            Debug.Log("An error occured. Likely because you do not have a mesh selected.");
        }
    }

    private void AssignBlendshapes()
    {
        var VRC_Visemes = avatarDescriptor.VisemeBlendShapes;

        for (int i = 0; i < avatarMesh.sharedMesh.blendShapeCount; i++)
        {
            var blendshapeName = avatarMesh.sharedMesh.GetBlendShapeName(i);
            switch (blendshapeName)
            {
                case "vrc.v_sil":
                    VRC_Visemes.SetValue(blendshapeName, 0);
                    break;
                case "vrc.v_pp":
                    VRC_Visemes.SetValue(blendshapeName, 1);
                    break;
                case "vrc.v_ff":
                    VRC_Visemes.SetValue(blendshapeName, 2);
                    break;
                case "vrc.v_th":
                    VRC_Visemes.SetValue(blendshapeName, 3);
                    break;
                case "vrc.v_dd":
                    VRC_Visemes.SetValue(blendshapeName, 4);
                    break;
                case "vrc.v_kk":
                    VRC_Visemes.SetValue(blendshapeName, 5);
                    break;
                case "vrc.v_ch":
                    VRC_Visemes.SetValue(blendshapeName, 6);
                    break;
                case "vrc.v_ss":
                    VRC_Visemes.SetValue(blendshapeName, 7);
                    break;
                case "vrc.v_nn":
                    VRC_Visemes.SetValue(blendshapeName, 8);
                    break;
                case "vrc.v_rr":
                    VRC_Visemes.SetValue(blendshapeName, 9);
                    break;
                case "vrc.v_aa":
                    VRC_Visemes.SetValue(blendshapeName, 10);
                    break;
                case "vrc.v_e":
                    VRC_Visemes.SetValue(blendshapeName, 11);
                    break;
                case "vrc.v_ih":
                    VRC_Visemes.SetValue(blendshapeName, 12);
                    break;
                case "vrc.v_oh":
                    VRC_Visemes.SetValue(blendshapeName, 13);
                    break;
                case "vrc.v_ou":
                    VRC_Visemes.SetValue(blendshapeName, 14);
                    break;
                default:
                    break;
            }
        }
    }
}
